namespace AdventOfCode.Analyzers;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Linq;
using System.Text;

[Generator]
public class ProblemGenerator : IIncrementalGenerator
{
    private const string FileHeaderComment = @"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var pipeline = context.SyntaxProvider.ForAttributeWithMetadataName(
            "AdventOfCode.Shared.ProblemAttribute",
            predicate: static (syntaxNode, _) => syntaxNode is ClassDeclarationSyntax,
            transform: static (context, symbol) =>
            {
                var containingClass = context.TargetSymbol;
                var attribute = context.Attributes[0];
                var name = attribute.NamedArguments.FirstOrDefault(a => a.Key == "name").Value.ToCSharpString();
                return new ProblemInfo(
                    containingClass.ContainingNamespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat.WithGlobalNamespaceStyle(SymbolDisplayGlobalNamespaceStyle.Omitted)),
                    containingClass.Name,
                    int.Parse(attribute.ConstructorArguments[0].Value?.ToString()),
                    int.Parse(attribute.ConstructorArguments[1].Value?.ToString()),
                    attribute.ConstructorArguments.Length == 3 ? attribute.ConstructorArguments[2].Value?.ToString() : null);
            }
            );

        context.RegisterSourceOutput(pipeline, static (context, model) =>
        {
            context.AddSource($"{model.ClassName}.g.cs", SourceText.From($$"""
            {{FileHeaderComment}}

            namespace {{model.Namespace}}
            {
                #if NETSTANDARD || NETFRAMEWORK || NETCOREAPP
                [System.CodeDom.Compiler.GeneratedCode("{{typeof(ProblemGenerator).FullName}}", "{{ThisAssembly.AssemblyVersion}}")]
                #endif
                #if NET40_OR_GREATER || NETCOREAPP2_0_OR_GREATER || NETSTANDARD2_0_OR_GREATER
                [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                #endif
                public partial class {{model.ClassName}} : AdventOfCode.Shared.ISolverWithDetails
                {
                    public int Year => {{model.Year}};
                    public int Day => {{model.Day}};
                    public string Name => {{(string.IsNullOrWhiteSpace(model.Name) ? "string.Empty" : $"\"{model.Name}\"")}};
                }
            }
            """, Encoding.UTF8));
        });
    }
}


public readonly record struct ProblemInfo
{
    public readonly string Namespace;
    public readonly string ClassName;
    public readonly int Year;
    public readonly int Day;
    public readonly string? Name;

    public ProblemInfo(string Namespace, string className, int year, int day, string? name)
    {
        this.Namespace = Namespace;
        this.ClassName = className;
        this.Year = year;
        this.Day = day;
        this.Name = name;
    }
}
